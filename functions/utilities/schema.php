<?php

/**
 * The Schema.
 *
 * As the template files run they call functions that put 
 * info needed for the Schema.org markup into $GLOBALS['schema'].
 * The template functions are in functions/utility_functions.php
 * 
 * $GLOBALS['schema'] is split into arrays prefixed by the item ID;
 * e.g. $GLOBALS['schema'][213].
 *
 * @package Wordpress
 * @subpackage BRHG2016
 * @since BRHG2016 1.0
 *
 */

# Delcare the variable.
global $schema;
$schema = array();

/**
 * Put the title generated by the_title() or get_the_title() in $GLOBALS['schema']
 * as long as it is the main query called from the loop.
 * 
 * @param string     $title the title generated by the_title() or get_the_title().
 *                   Passed by the the_title filter.
 * @param int        $id the ID Of the post who's title is generated.
 *                   Passed by the the_title filter.
 *
 * @return string    $title the unaltered title that was passed to the function.
 */
function brhg2016_schema_the_title($title, $id) {
    if (is_main_query()) {
        $GLOBALS['schema'][$id]['title_from_filter'] = $title;
    }
    return $title;
}

add_filter('the_title', 'brhg2016_schema_the_title', 10, 2);

/**
 * Controls which schema is returned for single items.#
 * Called from the footer.
 *
 * @return string    The schema for the item.
 */
function brhg201_get_schema() {
    if (!is_singular()) {
        return;
    }

    # Make sure the ID we get is the one for the main query, important on single Event Series.
    $item = get_queried_object();

    # If there is no meta for this item bail.
    if (!isset($GLOBALS['schema'][$item->ID]) || empty($GLOBALS['schema'][$item->ID])) {
        return;
    }

    brhg2016_schema_defaults($item);

    $schema     = $GLOBALS['schema'][$item->ID];
    $post_type  = get_post_type($item->ID);
    $permalink  = get_permalink($item->ID);

    $schema_out = '';
    switch ($post_type) {
        case 'events':
            $schema_out = brhg2016_events_schema($item, $permalink);
            break;
        case 'pamphlets':
            $schema_out = brhg2016_pamphlets_schema($item, $permalink);
            break;
        case 'articles':
            $schema_out = brhg2016_articles_schema($item, $permalink);
            break;
        case 'books':
            $schema_out = brhg2016_books_schema($item, $permalink);
            break;
        case 'post':
            $schema_out = brhg2016_blog_schema($item, $permalink);
            break;
        case 'venues':
            $schema_out = brhg2016_venues_schema($item, $permalink);
            break;
        default:
            return;
            break;
    }

    if (is_singular()) {

        $publisher = brhg2016_schema_brhg($item);

        $head =     "\"@context\": \"http://schema.org\",
                    \t\"@type\": \"WebPage\",
                    \t\"publisher\": $publisher,
                    \t\"specialty\": {
                        \t\"@type\": \"Specialty\",
                        \t\"name\": \"History\" 
                    \t}";

        $schema_out =   "<script type=\"application/ld+json\"> 
                        {
                            $head,
                        \"mainEntity\": {
                                $schema_out
                            }
                        }
                        </script>";
    } else {

        $schema_out =    "<script type=\"application/ld+json\"> 
                            {
                                \"@context\": \"http:\/\/schema.org\",
                                $schema_out
                            }
                            </script>";
    }

    return $schema_out;
}


function brhg2016_schema_defaults($item) {

    $defaults = array(
        'title_from_filter'         => "",
        'sub_title_meta'            => "",
        'page_title'                => "",
        'series_connected'          => array(),
        'section'                   => "",
        'event_start_datetime'      => "",
        'event_end_datetime'        => "",
        'series_start_datetime'     => "",
        'series_end_datetime'       => "",
        'venue_postcode_meta'       => "",
        'venues_connected'          => array(),
        'venue_address1_meta'       => "",
        'venue_address2_meta'       => "",
        'venue_address3_meta'       => "",
        'venue_city_meta'           => "",
        'venue_email_meta'          => "",
        'venue_phone_meta'          => "",
        'venue_website_meta'        => "",
        'price_meta'                => "",
        'speakers_connected'        => array(),
        'author_connected'          => array(),
        'brhg_event_filter_meta'    => "",
        'pamphlet_number_meta'      => "",
        'number_of_pages_meta'      => "",
        'pam_front_cover_meta'      => "",
        'pam_front_cover_src'       => array(),
        'pam_back_cover_meta'       => "",
        'article_author_connected'  => array(),
        'author_meta'               => "",
        'publisher_meta'            => "",
        'book_cover_src'            => array(),
        'posted'                    => "",
        'modified'                  => ""
    );

    $GLOBALS['schema'][$item->ID] = wp_parse_args($GLOBALS['schema'][$item->ID], $defaults);
}

/* Schema layout functions
****************************************************************************************************************************************************/

/**
 * The schema 'name' for a single item
 *
 * @param WP_Post object     $item the post who's schema is required.
 *
 * @return string            The 'name'.
 */
function brhg2016_schema_single_name($item) {
    $schema = $GLOBALS['schema'][$item->ID];

    $name = (empty($schema['sub_title_meta'])) ?
        $schema['title_from_filter'] :
        "{$schema['title_from_filter']}: {$schema['sub_title_meta']}";
    $name = mb_strimwidth($name, 0, 110, '');

    return $name;
}

/**
 * Generates the 'organization' details for BRHG.
 *
 * @param WP_Post object     $item the post who's schema is required.
 *
 * @return string    The 'organization' details for BRHG
 */
function brhg2016_schema_brhg($item) {

    $logo = get_template_directory_uri() . "/images/brhg-logo-schema.png";

    $brhg =    "{
                    \t\"@type\": \"Organization\",
                    \t\"name\": \"Bristol Radical History Group\",
                    \t\"url\": \"http://www.brh.org.uk\",
                    \t\"logo\": {
                        \t\"@type\": \"ImageObject\",
                        \t\"name\": \"Bristol Radical History Group Logo\",
                        \t\"url\": \"$logo\",
                        \t\"Width\": 71,
                        \t\"height\": 30
                        \t}
                \t}";

    return $brhg;
}

/**
 * Generates 'person' details for each connected speaker/author
 *
 * @param WP_Post object     $item the post who's schema is required.
 *
 * @return string    Schema details for the person.
 */
function brhg2016_schema_people($item, $type, $post_type) {

    $connected = $GLOBALS['schema'][$item->ID][$type];


    $people = '';
    $person = ($post_type === 'events') ? 'performer' : 'author';

    $i = 1;
    if (!empty($connected)) {
        foreach ($connected as $key => $contributor) {
            $people .=  "\"$person\": {
                        \t\"@type\": \"Person\",
                        \t\"name\": \"$contributor\"
                    }";
            $people .= ($i < count($connected)) ? ",\n" : '';
            $i++;
        }
    } else {
        $people .=  "\"$person\": {
            \t\"@type\": \"Person\",
            \t\"name\": \"No person\"
        }";
    }


    return $people;
}

/**
 * Generates the Schema for the featured image.
 * If the post is an Event the Event Series image is used,
 * but if there Series image the function looks for a
 *  featured image for the single Event itself.
 * 
 * @param WP_Post object     $item the post who's schema is required.
 * @param string             $post_type the type of post for which the schema is being generated.
 * @param string             $size the size of the featured image to return.
 * @param boolean            $img_object whether to return a Schema imageObject or just the image url.
 *
 * @return string            Schema details for the featured image imageObject if $img_object is true
 *                           or the url of the featured image is $img_object is false.
 */
function brhg2016_schema_feat_image($item, $post_type, $size = 'big_thumb', $img_object = true) {
    # If this is an event also check that it is connected to a Event Series.
    $featured_id = ($post_type === 'events' && isset($item->series[0])) ? get_post_thumbnail_id($item->series[0]->ID) : get_post_thumbnail_id($item->ID);
    $featured_url_array = wp_get_attachment_image_src($featured_id, $size);

    if ($post_type === 'events' && empty($featured_url_array)) {
        $featured_id = get_post_thumbnail_id($item->ID);
        $featured_url_array = wp_get_attachment_image_src($featured_id, $size);
    }

    $feat_img = "";

    if ($img_object && $featured_url_array) {
        $feat_img = "\"image\": {
                    \"@type\": \"ImageObject\",
                    \"name\": \"Featured Image\",
                    \"url\": \"{$featured_url_array[0]}\",
                    \"Width\": \"{$featured_url_array[1]}\", 
                    \"height\": \"{$featured_url_array[2]}\"
            }";
    } elseif ($featured_url_array) {
        $feat_img =  $featured_url_array[0];
    }

    return $feat_img;
}

/**
 * Generates the superEvent Event Schema for the Event Series connected to a single Event.
 *
 * @param WP_Post object     $item the post who's schema is required.
 *
 * @return string            Event Schema for the Event Series connected to a single Event 
 */
function brhg2016_series_schema($item) {
    $schema = $GLOBALS['schema'][$item->ID];

    $connected = $GLOBALS['schema'][$item->ID]['series_connected'];

    $event_series = '';
    $i = 1;
    if (!empty($connected)) {
        foreach ($connected as $key => $series) {
            $series_permalink = get_permalink($key);
            $event_series .=    "\"superEvent\":{
                                    \"@type\": \"Event\",
                                    \"name\": \"$series\",
                                    \"location\": {
                                        \"@type\": \"Place\",
                                        \"address\": \"Several\",
                                        \"name\": \"Several\" 
                                    },
                                    \"startDate\": \"{$schema['series_start_datetime']}\",
                                    \"endDate\": \"{$schema['series_end_datetime']}\",
                                    \"url\": \"$series_permalink\"
                                }";

            $event_series .= ($i < count($connected)) ? ",\n" : '';
            $i++;
        }
    } else {
        $event_series .= "\"typicalAgeRange\": \"any\"";
    }

    return  $event_series;
}

/**
 * Generate the 'keyword' Schema from the item's tags.
 *
 * @param WP_Post object     $item the post who's schema is required.
 *
 * @return string            The keyword Schema as a comma separated list.
 */
function brhg2016_schema_keywords($item) {
    $tags = get_the_tags($item->ID);
    $keywords = '';
    if ($tags) {
        foreach ($tags as $key => $tag) {
            $keywords .= $tag->name;
            $keywords .= ($key + 1 < count($tags)) ? ',' : '';
        }
    }

    return $keywords;
}

/**
 * Generated the 'about' Schema' for a creativeWork from the categories (Subjects) attached to each item.
 * The 'about' property is the "The subject matter of the content."
 * 
 * @param WP_Post object     $item the post who's schema is required.
 *
 * @return string                  The 'about' Schema, one Thing per category.
 *
 */
function brhg2016_schema_about($item) {
    $subjects = get_the_category($item->ID);
    $about = '';
    foreach ($subjects as $key => $subject) {
        $term_link = get_term_link($subject->term_id);
        $about .=   "\"about\": {
                        \t\"@type\": \"Thing\",
                        \t\"name\": \"{$subject->name}\",
                        \t\"description\": \"{$subject->description}\",
                        \t\"url\": \"$term_link\"
                    }";
        $about .= ($key + 1 < count($subjects)) ? ",\n" : '';
    }

    return $about;
}

/**
 * Generates the articleSection Schema for an item from the Section and Sub-section.
 *
 * @param WP_Post object     $item the post who's schema is required.
 *
 * @return                   The articleSection Schema as 'Section: Sub-section', 
 *                           or just 'section' if there is no Sub-section.
 */
function brhg2016_schema_section($item) {
    $schema = $GLOBALS['schema'][$item->ID];

    $section = '';

    if (isset($schema['sub_section']) && !empty($schema['sub_section'])) {
        $subs = explode(', ', $schema['sub_section']);

        foreach ($subs as $key => $sub) {
            $section .= "{$schema['section']}: $sub";
            $section .= ($key + 1 < count($subs)) ? ',' : '';
        }
    } else {
        $section .=  $schema['section'];
    }

    return $section;
}

/**
 * Generates a Place item of Venues.
 * 
 * @param WP_Post object     $item the post who's schema is required.
 *
 * @return string            The Place item.
 */
function brhg2016_venue_details_schema($item) {
    $schema = $GLOBALS['schema'][$item->ID];

    $name           = (get_post_type($item) === 'events') ? reset($schema['venues_connected']) : brhg2016_schema_single_name($item);
    $name           = (empty($name)) ? 'name' : $name;
    $venue_address  = rtrim("{$schema['venue_address1_meta']}, {$schema['venue_address2_meta']}, {$schema['venue_address3_meta']}", ', ');

    $venue =    "   \"@type\": \"Place\",
                    \"name\":\"$name\",
                    \"address\": {
                            \"@type\": \"PostalAddress\",
                            \"addressLocality\": \"{$schema['venue_city_meta']}\",
                            \"postalCode\": \"{$schema['venue_postcode_meta']}\",
                            \"streetAddress\": \"$venue_address\",
                            \"email\": \"{$schema['venue_email_meta']}\",
                            \"telephone\": \"{$schema['venue_phone_meta']}\"
                        },
                    \"url\": \"{$schema['venue_website_meta']}\"";

    return $venue;
}

/* Individual Schema
****************************************************************************************************************************************************/

/**
 * The Schema markup for Events
 *
 * @param WP_Post object     $item the post who's schema is required.
 * @param string             $permalink the url of the current item.
 * 
 * @return string            The Schema markup.
 */
function brhg2016_events_schema($item, $permalink) {

    $schema = $GLOBALS['schema'][$item->ID];

    $name           = brhg2016_schema_single_name($item);
    $venue          = brhg2016_venue_details_schema($item);
    $organizer      = ($schema['brhg_event_filter_meta'] === 'brhg') ? brhg2016_schema_brhg($item) : "\" \"";
    $people         = brhg2016_schema_people($item, 'speakers_connected', 'events');
    $feat_img       = brhg2016_schema_feat_image($item, 'events');
    $event_series   = brhg2016_series_schema($item);

    $event_schema = "\"@type\": \"Event\",
                    \"name\": \"$name\",
                    \"location\": {
                        $venue
                    },
                    \"organizer\": $organizer,
                    $people,
                    \"startDate\": \"{$schema['event_start_datetime']}\",
                    \"endDate\": \"{$schema['event_end_datetime']}\",
                    \"url\": \"$permalink\",
                    $feat_img,
                    $event_series,
                    \"mainEntityOfPage\": {
                        \"@type\": \"WebPage\",
                        \"@id\": \"$permalink\"
                    }
                    ";


    return $event_schema;
}

/**
 * The Schema markup for Pamphlets
 *
 * @param WP_Post object     $item the post who's schema is required.
 * @param string             $permalink the url of the current item.
 * 
 * @return string            The Schema markup.
 */
function brhg2016_pamphlets_schema($item, $permalink) {
    $schema = $GLOBALS['schema'][$item->ID];

    $name               = brhg2016_schema_single_name($item);
    $about              = brhg2016_schema_about($item);
    $keywords           = brhg2016_schema_keywords($item);
    $people             = brhg2016_schema_people($item, 'author_connected', 'pamphlets');
    $publisher          = brhg2016_schema_brhg($item);
    $feat_img           = brhg2016_schema_feat_image($item, 'pamphlets');
    $thumb              = brhg2016_schema_feat_image($item, 'pamphlets', 'tiny_thumbs', false);
    $pamphleteer_url    = get_post_type_archive_link($item, 'pamphlets');

    $pamphlet_schema =  "\"@type\": \"Book\",
                        \"name\": \"$name\",
                        $about,                       
                        $people,
                        \"keywords\": \"$keywords\",
                        \"publisher\": $publisher,
                        \"isPartOf\": {
                            \"@type\": \"CreativeWork\",
                            \"name\": \"Bristol Radical Pamphleteer\",
                            \"url\": \"$pamphleteer_url\"
                        },
                        \"url\": \"$permalink\",
                        $feat_img,
                        \"thumbnailUrl\": \"$thumb\",
                        \"numberOfPages\": \"{$schema['number_of_pages_meta']}\",
                        \"mainEntityOfPage\": {
                            \"@type\": \"WebPage\",
                            \"@id\": \"$permalink\"
                        }
                        ";

    return $pamphlet_schema;
}

/**
 * The Schema markup for Articles
 *
 * @param WP_Post object     $item the post who's schema is required.
 * @param string             $permalink the url of the current item.
 * 
 * @return string            The Schema markup.
 */
function brhg2016_articles_schema($item, $permalink) {
    $schema = $GLOBALS['schema'][$item->ID];

    $name       = brhg2016_schema_single_name($item);
    $keywords   = brhg2016_schema_keywords($item);
    $about      = brhg2016_schema_about($item);
    $section    = brhg2016_schema_section($item);
    $people     = brhg2016_schema_people($item, 'article_author_connected', 'articles');
    $publisher  = brhg2016_schema_brhg($item);
    $feat_img   = brhg2016_schema_feat_image($item, 'articles');
    $thumb      = brhg2016_schema_feat_image($item, 'articles', 'tiny_thumbs', false);

    $article_schema =  "\"@type\": \"Article\",
                        \"name\": \"$name\",
                        \"headline\": \"$name\",
                        \"articleSection\": \"$section\",
                        $about,
                        \"keywords\": \"$keywords\",
                        $people,
                        \"publisher\": $publisher,
                        \"url\": \"$permalink\",
                        $feat_img,
                        \"thumbnailUrl\": \"$thumb\",
                        \"datePublished\": \"{$schema['posted']}\",
                        \"dateModified\": \"{$schema['modified']}\",
                        \"mainEntityOfPage\": {
                            \"@type\": \"WebPage\",
                            \"@id\": \"$permalink\"
                        }
                        ";

    return $article_schema;
}

/**
 * The Schema markup for Books
 *
 * @param WP_Post object     $item the post who's schema is required.
 * @param string             $permalink the url of the current item.
 * 
 * @return string            The Schema markup.
 */
function brhg2016_books_schema($item, $permalink) {
    $schema = $GLOBALS['schema'][$item->ID];

    $name           = brhg2016_schema_single_name($item);
    $keywords       = brhg2016_schema_keywords($item);
    $about          = brhg2016_schema_about($item);
    $author_name    = (empty($schema['$author_meta'])) ? "Authour" : $schema['$author_meta'];
    $feat_img       = brhg2016_schema_feat_image($item, 'articles');
    $thumb          = brhg2016_schema_feat_image($item, 'articles', 'tiny_thumbs', false);

    $book_schema =  "\"@type\": \"Books\",
                        \"name\": \"$name\",
                        \"bookEdition\": \"{$schema['edition_meta']}\",
                        $about,
                        \"keywords\": \"$keywords\",
                        \"author\": {
                            \"@type\": \"Person\",
                            \"name\": \"$author_name\",
                        },
                        \"publisher\": \"{$schema['publisher_meta']}\",
                        \"url\": \"$permalink\",
                        $feat_img,
                        \"thumbnailUrl\": \"$thumb\",
                        \"mainEntityOfPage\": {
                            \"@type\": \"WebPage\",
                            \"@id\": \"$permalink\"
                        }
                        ";

    return $book_schema;
}

/**
 * The Schema markup for Blog/Posts
 *
 * @param WP_Post object     $item the post who's schema is required.
 * @param string     $permalink the url of the current item.
 * 
 * @return string    The Schema markup.
 */
function brhg2016_blog_schema($item, $permalink) {
    $schema = $GLOBALS['schema'][$item->ID];

    $name       = brhg2016_schema_single_name($item);
    $keywords   = brhg2016_schema_keywords($item);
    $about      = brhg2016_schema_about($item);
    $section    = brhg2016_schema_section($item);
    $author     = get_the_author();
    $publisher  = brhg2016_schema_brhg($item);
    $feat_img   = brhg2016_schema_feat_image($item, 'articles');
    $thumb      = brhg2016_schema_feat_image($item, 'articles', 'tiny_thumbs', false);

    $blog_schema =  "\"@type\": \"BlogPosting\",
                        \"name\": \"$name\",
                        \"headline\": \"$name\",
                        \"articleSection\": \"$section\",
                        $about,
                        \"keywords\": \"$keywords\",
                        \"author\": {
                            \"@type\": \"Person\",
                            \"name\": \"$author\"
                        },
                        \"publisher\": $publisher,
                        \"url\": \"$permalink\",
                        $feat_img,
                        \"thumbnailUrl\": \"$thumb\",
                        \"datePublished\": \"{$schema['posted']}\",
                        \"dateModified\": \"{$schema['modified']}\",
                        \"mainEntityOfPage\": {
                            \"@type\": \"WebPage\",
                            \"@id\": \"$permalink\"
                        }";

    return $blog_schema;
}

/**
 * The Schema markup for Venues.
 *
 * @param WP_Post object     $item the post who's schema is required.
 * @param string             $permalink the url of the current item.
 * 
 * @return string            The Schema markup.
 */
function brhg2016_venues_schema($item, $permalink) {
    $schema = $GLOBALS['schema'][$item->ID];

    $venue  = brhg2016_venue_details_schema($item);

    $venue_schema = "$venue,
                        \"mainEntityOfPage\": {
                            \"@type\": \"WebPage\",
                            \"@id\": \"$permalink\"
                        }";

    return $venue_schema;
}
